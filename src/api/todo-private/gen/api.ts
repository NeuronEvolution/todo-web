/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Todo Private API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost/api-private/v1/todo".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface FriendInfo
 */
export interface FriendInfo {
    /**
     * 
     * @type {string}
     * @memberof FriendInfo
     */
    userID: string;
    /**
     * 
     * @type {string}
     * @memberof FriendInfo
     */
    userName: string;
    /**
     * 
     * @type {TodoVisibility}
     * @memberof FriendInfo
     */
    todoVisibility: TodoVisibility;
    /**
     * 
     * @type {number}
     * @memberof FriendInfo
     */
    todoCount: number;
}

/**
 * 
 * @export
 * @interface FriendInfoList
 */
export interface FriendInfoList {
    /**
     * 
     * @type {string}
     * @memberof FriendInfoList
     */
    nextPageToken: string;
    /**
     * 
     * @type {Array&lt;FriendInfo&gt;}
     * @memberof FriendInfoList
     */
    items: Array<FriendInfo>;
}

/**
 * 
 * @export
 * @interface TodoItem
 */
export interface TodoItem {
    /**
     * 
     * @type {string}
     * @memberof TodoItem
     */
    todoId: string;
    /**
     * 
     * @type {string}
     * @memberof TodoItem
     */
    category: string;
    /**
     * 
     * @type {string}
     * @memberof TodoItem
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof TodoItem
     */
    desc?: string;
    /**
     * 
     * @type {TodoStatus}
     * @memberof TodoItem
     */
    status: TodoStatus;
    /**
     * 
     * @type {number}
     * @memberof TodoItem
     */
    priority?: number;
}

/**
 * 
 * @export
 * @interface TodoItemGroup
 */
export interface TodoItemGroup {
    /**
     * 
     * @type {string}
     * @memberof TodoItemGroup
     */
    category: string;
    /**
     * 
     * @type {Array&lt;TodoItem&gt;}
     * @memberof TodoItemGroup
     */
    todoItemList: Array<TodoItem>;
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum TodoStatus {
    Ongoing = <any> 'ongoing',
    Completed = <any> 'completed',
    Discard = <any> 'discard'
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum TodoVisibility {
    Private = <any> 'private',
    Public = <any> 'public',
    Friend = <any> 'friend'
}

/**
 * 
 * @export
 * @interface UserProfile
 */
export interface UserProfile {
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    userName: string;
    /**
     * 
     * @type {TodoVisibility}
     * @memberof UserProfile
     */
    todoVisibility: TodoVisibility;
}


/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 
         * @param {TodoItem} todoItem 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTodo(todoItem: TodoItem, options: any = {}): FetchArgs {
            // verify required parameter 'todoItem' is not null or undefined
            if (todoItem === null || todoItem === undefined) {
                throw new RequiredError('todoItem','Required parameter todoItem was null or undefined when calling addTodo.');
            }
            const localVarPath = `/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"TodoItem" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(todoItem || {}) : (todoItem || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryNameList(options: any = {}): FetchArgs {
            const localVarPath = `/categoryNames`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} friendID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFriend(friendID: string, options: any = {}): FetchArgs {
            // verify required parameter 'friendID' is not null or undefined
            if (friendID === null || friendID === undefined) {
                throw new RequiredError('friendID','Required parameter friendID was null or undefined when calling getFriend.');
            }
            const localVarPath = `/friends/{friendID}`
                .replace(`{${"friendID"}}`, encodeURIComponent(String(friendID)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {number} [pageSize] 
         * @param {string} [pageToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFriendsList(pageSize?: number, pageToken?: string, options: any = {}): FetchArgs {
            const localVarPath = `/friends`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} todoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodo(todoId: string, options: any = {}): FetchArgs {
            // verify required parameter 'todoId' is not null or undefined
            if (todoId === null || todoId === undefined) {
                throw new RequiredError('todoId','Required parameter todoId was null or undefined when calling getTodo.');
            }
            const localVarPath = `/{todoId}`
                .replace(`{${"todoId"}}`, encodeURIComponent(String(todoId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} [friendID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodoList(friendID?: string, options: any = {}): FetchArgs {
            const localVarPath = `/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (friendID !== undefined) {
                localVarQueryParameter['friendID'] = friendID;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} [friendID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodoListByCategory(friendID?: string, options: any = {}): FetchArgs {
            const localVarPath = `/listByCategory`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (friendID !== undefined) {
                localVarQueryParameter['friendID'] = friendID;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProfile(options: any = {}): FetchArgs {
            const localVarPath = `/userProfile`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} todoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTodo(todoId: string, options: any = {}): FetchArgs {
            // verify required parameter 'todoId' is not null or undefined
            if (todoId === null || todoId === undefined) {
                throw new RequiredError('todoId','Required parameter todoId was null or undefined when calling removeTodo.');
            }
            const localVarPath = `/{todoId}`
                .replace(`{${"todoId"}}`, encodeURIComponent(String(todoId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} todoId 
         * @param {TodoItem} todoItem 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTodo(todoId: string, todoItem: TodoItem, options: any = {}): FetchArgs {
            // verify required parameter 'todoId' is not null or undefined
            if (todoId === null || todoId === undefined) {
                throw new RequiredError('todoId','Required parameter todoId was null or undefined when calling updateTodo.');
            }
            // verify required parameter 'todoItem' is not null or undefined
            if (todoItem === null || todoItem === undefined) {
                throw new RequiredError('todoItem','Required parameter todoItem was null or undefined when calling updateTodo.');
            }
            const localVarPath = `/{todoId}`
                .replace(`{${"todoId"}}`, encodeURIComponent(String(todoId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"TodoItem" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(todoItem || {}) : (todoItem || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {UserProfile} [userProfile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProfile(userProfile?: UserProfile, options: any = {}): FetchArgs {
            const localVarPath = `/userProfile`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UserProfile" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(userProfile || {}) : (userProfile || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {TodoVisibility} visibility 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProfileTodoVisibility(visibility: TodoVisibility, options: any = {}): FetchArgs {
            // verify required parameter 'visibility' is not null or undefined
            if (visibility === null || visibility === undefined) {
                throw new RequiredError('visibility','Required parameter visibility was null or undefined when calling updateUserProfileTodoVisibility.');
            }
            const localVarPath = `/userProfile/todoVisibility`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"TodoVisibility" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(visibility || {}) : (visibility || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} userName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProfileUserName(userName: string, options: any = {}): FetchArgs {
            // verify required parameter 'userName' is not null or undefined
            if (userName === null || userName === undefined) {
                throw new RequiredError('userName','Required parameter userName was null or undefined when calling updateUserProfileUserName.');
            }
            const localVarPath = `/userProfile/userName`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (userName !== undefined) {
                localVarQueryParameter['userName'] = userName;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 
         * @param {TodoItem} todoItem 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTodo(todoItem: TodoItem, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).addTodo(todoItem, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        return response.json().then((data: {}) => {throw data; });
                    }
                });
            };
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryNameList(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getCategoryNameList(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        return response.json().then((data: {}) => {throw data; });
                    }
                });
            };
        },
        /**
         * 
         * @summary 
         * @param {string} friendID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFriend(friendID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FriendInfo> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getFriend(friendID, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        return response.json().then((data: {}) => {throw data; });
                    }
                });
            };
        },
        /**
         * 
         * @summary 
         * @param {number} [pageSize] 
         * @param {string} [pageToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFriendsList(pageSize?: number, pageToken?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FriendInfoList> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getFriendsList(pageSize, pageToken, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        return response.json().then((data: {}) => {throw data; });
                    }
                });
            };
        },
        /**
         * 
         * @summary 
         * @param {string} todoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodo(todoId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TodoItem> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getTodo(todoId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        return response.json().then((data: {}) => {throw data; });
                    }
                });
            };
        },
        /**
         * 
         * @summary 
         * @param {string} [friendID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodoList(friendID?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<TodoItem>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getTodoList(friendID, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        return response.json().then((data: {}) => {throw data; });
                    }
                });
            };
        },
        /**
         * 
         * @summary 
         * @param {string} [friendID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodoListByCategory(friendID?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<TodoItemGroup>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getTodoListByCategory(friendID, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        return response.json().then((data: {}) => {throw data; });
                    }
                });
            };
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProfile(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserProfile> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getUserProfile(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        return response.json().then((data: {}) => {throw data; });
                    }
                });
            };
        },
        /**
         * 
         * @summary 
         * @param {string} todoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTodo(todoId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).removeTodo(todoId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return new Promise<Response>((resolve) => {return resolve(response);})
                    } else {
                        return response.json().then((data: {}) => {throw data; });
                    }
                });
            };
        },
        /**
         * 
         * @summary 
         * @param {string} todoId 
         * @param {TodoItem} todoItem 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTodo(todoId: string, todoItem: TodoItem, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).updateTodo(todoId, todoItem, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return new Promise<Response>((resolve) => {return resolve(response);})
                    } else {
                        return response.json().then((data: {}) => {throw data; });
                    }
                });
            };
        },
        /**
         * 
         * @summary 
         * @param {UserProfile} [userProfile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProfile(userProfile?: UserProfile, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).updateUserProfile(userProfile, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return new Promise<Response>((resolve) => {return resolve(response);})
                    } else {
                        return response.json().then((data: {}) => {throw data; });
                    }
                });
            };
        },
        /**
         * 
         * @summary 
         * @param {TodoVisibility} visibility 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProfileTodoVisibility(visibility: TodoVisibility, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).updateUserProfileTodoVisibility(visibility, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return new Promise<Response>((resolve) => {return resolve(response);})
                    } else {
                        return response.json().then((data: {}) => {throw data; });
                    }
                });
            };
        },
        /**
         * 
         * @summary 
         * @param {string} userName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProfileUserName(userName: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).updateUserProfileUserName(userName, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return new Promise<Response>((resolve) => {return resolve(response);})
                    } else {
                        return response.json().then((data: {}) => {throw data; });
                    }
                });
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary 
         * @param {TodoItem} todoItem 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTodo(todoItem: TodoItem, options?: any) {
            return DefaultApiFp(configuration).addTodo(todoItem, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryNameList(options?: any) {
            return DefaultApiFp(configuration).getCategoryNameList(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 
         * @param {string} friendID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFriend(friendID: string, options?: any) {
            return DefaultApiFp(configuration).getFriend(friendID, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 
         * @param {number} [pageSize] 
         * @param {string} [pageToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFriendsList(pageSize?: number, pageToken?: string, options?: any) {
            return DefaultApiFp(configuration).getFriendsList(pageSize, pageToken, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 
         * @param {string} todoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodo(todoId: string, options?: any) {
            return DefaultApiFp(configuration).getTodo(todoId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 
         * @param {string} [friendID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodoList(friendID?: string, options?: any) {
            return DefaultApiFp(configuration).getTodoList(friendID, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 
         * @param {string} [friendID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodoListByCategory(friendID?: string, options?: any) {
            return DefaultApiFp(configuration).getTodoListByCategory(friendID, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProfile(options?: any) {
            return DefaultApiFp(configuration).getUserProfile(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 
         * @param {string} todoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTodo(todoId: string, options?: any) {
            return DefaultApiFp(configuration).removeTodo(todoId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 
         * @param {string} todoId 
         * @param {TodoItem} todoItem 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTodo(todoId: string, todoItem: TodoItem, options?: any) {
            return DefaultApiFp(configuration).updateTodo(todoId, todoItem, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 
         * @param {UserProfile} [userProfile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProfile(userProfile?: UserProfile, options?: any) {
            return DefaultApiFp(configuration).updateUserProfile(userProfile, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 
         * @param {TodoVisibility} visibility 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProfileTodoVisibility(visibility: TodoVisibility, options?: any) {
            return DefaultApiFp(configuration).updateUserProfileTodoVisibility(visibility, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 
         * @param {string} userName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProfileUserName(userName: string, options?: any) {
            return DefaultApiFp(configuration).updateUserProfileUserName(userName, options)(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary 
     * @param {} todoItem 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addTodo(todoItem: TodoItem, options?: any) {
        return DefaultApiFp(this.configuration).addTodo(todoItem, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCategoryNameList(options?: any) {
        return DefaultApiFp(this.configuration).getCategoryNameList(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 
     * @param {} friendID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getFriend(friendID: string, options?: any) {
        return DefaultApiFp(this.configuration).getFriend(friendID, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 
     * @param {} [pageSize] 
     * @param {} [pageToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getFriendsList(pageSize?: number, pageToken?: string, options?: any) {
        return DefaultApiFp(this.configuration).getFriendsList(pageSize, pageToken, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 
     * @param {} todoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTodo(todoId: string, options?: any) {
        return DefaultApiFp(this.configuration).getTodo(todoId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 
     * @param {} [friendID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTodoList(friendID?: string, options?: any) {
        return DefaultApiFp(this.configuration).getTodoList(friendID, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 
     * @param {} [friendID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTodoListByCategory(friendID?: string, options?: any) {
        return DefaultApiFp(this.configuration).getTodoListByCategory(friendID, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserProfile(options?: any) {
        return DefaultApiFp(this.configuration).getUserProfile(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 
     * @param {} todoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public removeTodo(todoId: string, options?: any) {
        return DefaultApiFp(this.configuration).removeTodo(todoId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 
     * @param {} todoId 
     * @param {} todoItem 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateTodo(todoId: string, todoItem: TodoItem, options?: any) {
        return DefaultApiFp(this.configuration).updateTodo(todoId, todoItem, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 
     * @param {} [userProfile] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateUserProfile(userProfile?: UserProfile, options?: any) {
        return DefaultApiFp(this.configuration).updateUserProfile(userProfile, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 
     * @param {} visibility 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateUserProfileTodoVisibility(visibility: TodoVisibility, options?: any) {
        return DefaultApiFp(this.configuration).updateUserProfileTodoVisibility(visibility, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 
     * @param {} userName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateUserProfileUserName(userName: string, options?: any) {
        return DefaultApiFp(this.configuration).updateUserProfileUserName(userName, options)(this.fetch, this.basePath);
    }

}

export interface addTodoParams {
    todoItem: TodoItem;
}
export interface getFriendParams {
    friendID: string;
}
export interface getFriendsListParams {
    pageSize?: number;
    pageToken?: string;
}
export interface getTodoParams {
    todoId: string;
}
export interface getTodoListParams {
    friendID?: string;
}
export interface getTodoListByCategoryParams {
    friendID?: string;
}
export interface removeTodoParams {
    todoId: string;
}
export interface updateTodoParams {
    todoId: string;
    todoItem: TodoItem;
}
export interface updateUserProfileParams {
    userProfile?: UserProfile;
}
export interface updateUserProfileTodoVisibilityParams {
    visibility: TodoVisibility;
}
export interface updateUserProfileUserNameParams {
    userName: string;
}


